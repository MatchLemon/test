From 36805724bbf126e7fc517988ecc592a1b5be4162 Mon Sep 17 00:00:00 2001
From: heyman zhang <heymanzhang@augmentum.com.cn>
Date: Fri, 18 Dec 2015 18:05:31 +0800
Subject: [PATCH] ngfileupload

---
 testProject/src/web/app.js                         |  51 ++-
 testProject/src/web/controller/demoController.js   |   5 +
 testProject/src/web/controller/listController.js   |   1 +
 testProject/src/web/controller/uploadController.js |  52 +++
 testProject/src/web/css/common.css                 |  70 ++++
 testProject/src/web/css/css1.css                   |  69 ++++
 testProject/src/web/directives/demoDirective.js    |  19 ++
 testProject/src/web/directives/listDirective.js    |   2 +-
 testProject/src/web/index.html                     |  21 +-
 testProject/src/web/main.js                        |   4 +-
 .../web/module/bower/angular-file-upload-shim.js   | 366 +++++++++++++++++++++
 testProject/src/web/partials/demo.html             |   5 +
 testProject/src/web/partials/dev/tool.html         |  10 +
 testProject/src/web/partials/list.html             |   2 +-
 testProject/src/web/partials/upload.html           |   4 +
 15 files changed, 670 insertions(+), 11 deletions(-)
 create mode 100644 testProject/src/web/controller/demoController.js
 create mode 100644 testProject/src/web/controller/uploadController.js
 create mode 100644 testProject/src/web/css/common.css
 create mode 100644 testProject/src/web/css/css1.css
 create mode 100644 testProject/src/web/directives/demoDirective.js
 create mode 100644 testProject/src/web/module/bower/angular-file-upload-shim.js
 create mode 100644 testProject/src/web/partials/demo.html
 create mode 100644 testProject/src/web/partials/dev/tool.html
 create mode 100644 testProject/src/web/partials/upload.html

diff --git a/testProject/src/web/app.js b/testProject/src/web/app.js
index bbeaba8..3d8e1c3 100644
--- a/testProject/src/web/app.js
+++ b/testProject/src/web/app.js
@@ -2,12 +2,15 @@ define([
     'angular' ,
     'angularLazyLoad',
     'angularUIRouter',
+    'angularFileUpload',
     'service/commonService',
-    'directives/listDirective'
+    'directives/listDirective',
+    'directives/demoDirective'
     ], function(angular, angularLazyLoad){
     var app = angular.module('Ag',[
         'ui.router', 
         'scs.couch-potato',
+        'angularFileUpload',
         'Ag.service',
         'Ag.directive',
         ]);
@@ -27,8 +30,14 @@ define([
             }).
             state('main',{
                 url:'/main',
-                templateUrl:"partials/main.html"
-
+                views:{
+                    "":{
+                        templateUrl: "partials/dev/tool.html"
+                        },
+                    "test@main":{
+                        templateUrl:"partials/main.html"
+                    }
+                }
             }).
             state('list',{
                 url:'/list',
@@ -40,6 +49,42 @@ define([
                             ])
                         }
 
+            }).
+            state('demo',{
+                url:'/demo',
+                templateUrl:'partials/demo.html',
+                controller: 'demoController',
+                        resolve: {
+                            l: $couchPotatoProvider.resolveDependencies([
+                                'controller/demoController', 
+                            ])
+                        }
+
+            }).
+            state("dev/tool", {
+                url: "/dev/tool",
+                views:{
+                    "":{
+                        templateUrl: "partials/dev/tool.html"
+                        },
+                    "test@dev/tool":{
+                        templateUrl:"partials/main.html"
+                    }
+
+                }
+               
+            }).
+            state("upload", {
+                url: "/upload",
+                templateUrl: "partials/upload.html",
+                controller: 'uploadController',
+                        resolve: {
+                            l: $couchPotatoProvider.resolveDependencies([
+                                'controller/uploadController', 
+                            ])
+                        }
+
+               
             })
         }]);
 
diff --git a/testProject/src/web/controller/demoController.js b/testProject/src/web/controller/demoController.js
new file mode 100644
index 0000000..41c5416
--- /dev/null
+++ b/testProject/src/web/controller/demoController.js
@@ -0,0 +1,5 @@
+define(['app'],function(app){
+   return app.registerController('demoController',['$scope',function($scope){
+        $scope.demoValue = 11;
+    }])
+});
\ No newline at end of file
diff --git a/testProject/src/web/controller/listController.js b/testProject/src/web/controller/listController.js
index 8153b60..3c6246f 100644
--- a/testProject/src/web/controller/listController.js
+++ b/testProject/src/web/controller/listController.js
@@ -3,6 +3,7 @@ define(['app'],function(app){
 return app.registerController('listController',['$scope','commonService',function($scope, commonService){
     console.log("lazy Load");
     $scope.inputValue = commonService.getValue('vale')==undefined ? 1 : commonService.getValue('vale');
+    
     $scope.click = function() {
         $scope.inputValue = $scope.inputValue + 1 ;
         commonService.setValue('vale',$scope.inputValue);
diff --git a/testProject/src/web/controller/uploadController.js b/testProject/src/web/controller/uploadController.js
new file mode 100644
index 0000000..76c539d
--- /dev/null
+++ b/testProject/src/web/controller/uploadController.js
@@ -0,0 +1,52 @@
+define(['app'],function(app){
+    return app.registerController('uploadController',['$scope','$http',function($scope, $http){
+        $scope.onFileSelect = function($files) {    //$files: an array of files selected, each file has name, size, and type.
+            for (var i = 0; i < $files.length; i++) {
+                
+            }
+        }
+
+        $scope.upload=function(files){
+            console.log(files);
+            $scope.files = files;
+            if (!$scope.files.length) {
+              return;
+            }
+        /*var file, _i, _len;*/
+       /* vm.file = '';
+        for (_i = 0, _len = files.length; _i < _len; _i++) {
+          file = files[_i];
+          fileName = file + file.name + ';';
+        }*/
+       
+        }
+
+        $scope.uploadFile=function(){
+            reader = new FileReader();
+            reader.readAsDataURL($scope.files[0]);
+            reader.onload = function(loadEvent) {
+                console.log(loadEvent.target.result);
+                var param={
+                    "file":"123456",
+                    "account":"heyman"
+                }
+                //x-www-form-urlencoded
+                $http({
+                  url: "http://localhost:8889/Test/upload",
+                  method: 'POST',
+                  headers: {
+                    
+                      'Content-Type': 'application/json'
+                  },
+                  data: param,
+                }).success(function(data){
+                alert(data);
+                });
+            };
+
+
+          
+        }
+    }])
+
+})
\ No newline at end of file
diff --git a/testProject/src/web/css/common.css b/testProject/src/web/css/common.css
new file mode 100644
index 0000000..64af024
--- /dev/null
+++ b/testProject/src/web/css/common.css
@@ -0,0 +1,70 @@
+.btn {
+    display: inline-block;
+    margin-bottom: 0;
+    font-weight: 400;
+    text-align: center;
+    vertical-align: middle;
+    touch-action: manipulation;
+    cursor: pointer;
+    border: 1px solid transparent;
+    white-space: nowrap;
+    padding: 6px 12px;
+    font-size: 14px;
+    line-height: 1.42857;
+    -webkit-user-select: none;
+    -moz-user-select: none;
+    -ms-user-select: none;
+    user-select: none;
+    border-radius: 4px;
+}
+
+*, :after, :before {
+    box-sizing: border-box;
+}
+
+.btn-green {
+    color: #ffffff;
+    background-color: #00b33b;
+    border-color: #00b33b;
+    border-style: solid;
+    border-width: 1px;
+}
+
+.btn-green:hover, .btn-green:focus, .btn-green.focus {
+    color: #ffffff;
+    background-color: #00d747;
+    border-color: #00d747;
+}
+
+.btn-success:hover{
+    background-color: #37b9a0;
+    border-color:transparent
+}
+
+.btn-success{
+    color: #fff;
+    background-color: #37c3aa;
+    border-color: transparent;
+}
+
+
+.btn-red{
+    color: #fff;
+    background-color: #f01400;;
+    border-color: transparent;
+}
+
+.btn-red:hover{
+     background-color: #c01022;
+}
+
+.btn-blue{
+    color: #fff;
+    background-color: #337ab7;
+    border-color: transparent;
+}
+
+.btn-blue:hover{
+     background-color: #286090;
+     border-color: transparent;
+}
\ No newline at end of file
diff --git a/testProject/src/web/css/css1.css b/testProject/src/web/css/css1.css
new file mode 100644
index 0000000..166943a
--- /dev/null
+++ b/testProject/src/web/css/css1.css
@@ -0,0 +1,69 @@
+*{
+    margin:0px;
+    padding: 0px;
+}
+
+#header{
+    background: #3579a6;
+    width: 100%;
+    height: 60px;
+}
+
+body{
+    width: 100%;
+    height: 100%;
+    /* min-width: 1200px; */
+    margin:0px;
+    padding: 0px;
+}
+
+.login-regist-area{
+    float: right;
+    position: relative;
+    width: auto;
+
+}
+
+ul{
+    list-style: none;
+}
+
+li{
+    float: left;
+}
+
+.header-unlogin a{
+    display: block;
+    width: 60px;
+    font-size: 14px;
+    text-align: center;
+    height: 60px;
+    line-height: 60px;
+    color: #fff;
+}
+
+:link, :visited {
+     text-decoration: none; 
+}
+
+#header a:hover{
+    background: #2c618d;
+}
+
+.login-regist-area{
+    margin-right: 20px;
+}
+
+.tools a {
+    display: block;
+    width: 60px;
+    font-size: 14px;
+    text-align: center;
+    height: 60px;
+    line-height: 60px;
+    color: #fff;
+}
+.tools {
+    display: inline-block;
+    float: right;
+}
\ No newline at end of file
diff --git a/testProject/src/web/directives/demoDirective.js b/testProject/src/web/directives/demoDirective.js
new file mode 100644
index 0000000..7542a6e
--- /dev/null
+++ b/testProject/src/web/directives/demoDirective.js
@@ -0,0 +1,19 @@
+define(['directives/baseDirective'],function(module){
+
+    return module.directive('demo',['$http',function($http){
+        return {
+            restrict:'A',
+            scope:{
+                demoVa:"=",
+            },
+            replace: true,
+            template:'<div><input type="button" ng-click="demoClick()" value="demoClick"></div>',
+            link:function(scope, elem, attr){
+                scope.demoClick = function(){
+                    scope.demoVa = scope.demoVa + 1 ;
+                }
+            }
+        }
+
+    }])
+})
\ No newline at end of file
diff --git a/testProject/src/web/directives/listDirective.js b/testProject/src/web/directives/listDirective.js
index 205bb0e..28212d7 100644
--- a/testProject/src/web/directives/listDirective.js
+++ b/testProject/src/web/directives/listDirective.js
@@ -1,5 +1,5 @@
 define(['directives/baseDirective'],function(module){
-    return module.directive('table',['$http',function($http){
+    return module.directive('myable',['$http',function($http){
         return {
             restrict:'A',
             scope:{
diff --git a/testProject/src/web/index.html b/testProject/src/web/index.html
index 67a8fec..d0f3868 100644
--- a/testProject/src/web/index.html
+++ b/testProject/src/web/index.html
@@ -4,13 +4,24 @@
     <base href="/"></base>
     <meta charset="UTF-8">
     <title>Document</title>
+    <link rel="stylesheet" type="text/css" href="css/css1.css">
+    <link rel="stylesheet" type="text/css" href="css/common.css">
 </head>
 <body>
-    <div>
-        hello world
-    </div>
-    <div><input type="button" id='bt' value="submit" ui-sref="main"></div>
-    <div ui-view></div>
+    <div class="contain">
+        <div id="header">
+            <div class="tools"><a href="/dev/tool">Tool</a></div>
+
+            <div class="login-regist-area">
+                <ul class="ui-style header-unlogin">
+                    <li><a href="#">登录</a></li>
+                    <li><a href="#">注册</a></li>
+                </ul>
+            </div>
+        </div>
+        <div ui-view></div>
+        <div class="mybody"></div>
+   
 </body>
 <script data-main="./main" src="./module/bower/require.js"></script>
 </html>
\ No newline at end of file
diff --git a/testProject/src/web/main.js b/testProject/src/web/main.js
index f846082..42bf598 100644
--- a/testProject/src/web/main.js
+++ b/testProject/src/web/main.js
@@ -6,7 +6,8 @@ require.config({
         angular : jsUrl + 'angular',
         app : 'app',
         angularUIRouter : jsUrl + 'angular-ui-router' ,
-        angularLazyLoad: jsUrl + 'angular-couch-potato'
+        angularLazyLoad: jsUrl + 'angular-couch-potato',
+        angularFileUpload: jsUrl + 'angular-file-upload',
     },
     shim: {
             angular: {
@@ -14,6 +15,7 @@ require.config({
             },
             angularUIRouter: ['angular'],
             angularLazyLoad: ['angular'],
+            angularFileUpload:['angular']
         },
     deps:['bootStrap']
 });
diff --git a/testProject/src/web/module/bower/angular-file-upload-shim.js b/testProject/src/web/module/bower/angular-file-upload-shim.js
new file mode 100644
index 0000000..48d66eb
--- /dev/null
+++ b/testProject/src/web/module/bower/angular-file-upload-shim.js
@@ -0,0 +1,366 @@
+/**!
+ * AngularJS file upload/drop directive with progress and abort
+ * FileAPI Flash shim for old browsers not supporting FormData 
+ * @author  Danial  <danial.farid@gmail.com>
+ * @version 2.0.0
+ */
+
+(function() {
+
+var hasFlash = function() {
+	try {
+	  var fo = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');
+	  if (fo) return true;
+	} catch(e) {
+	  if (navigator.mimeTypes['application/x-shockwave-flash'] != undefined) return true;
+	}
+	return false;
+}
+
+function patchXHR(fnName, newFn) {
+	window.XMLHttpRequest.prototype[fnName] = newFn(window.XMLHttpRequest.prototype[fnName]);
+};
+
+if ((window.XMLHttpRequest && !window.FormData) || (window.FileAPI && FileAPI.forceLoad)) {
+	var initializeUploadListener = function(xhr) {
+		if (!xhr.__listeners) {
+			if (!xhr.upload) xhr.upload = {};
+			xhr.__listeners = [];
+			var origAddEventListener = xhr.upload.addEventListener;
+			xhr.upload.addEventListener = function(t, fn, b) {
+				xhr.__listeners[t] = fn;
+				origAddEventListener && origAddEventListener.apply(this, arguments);
+			};
+		}
+	}
+	
+	patchXHR('open', function(orig) {
+		return function(m, url, b) {
+			initializeUploadListener(this);
+			this.__url = url;
+			try {
+				orig.apply(this, [m, url, b]);
+			} catch (e) {
+				if (e.message.indexOf('Access is denied') > -1) {
+					orig.apply(this, [m, '_fix_for_ie_crossdomain__', b]);
+				}
+			}
+		}
+	});
+
+	patchXHR('getResponseHeader', function(orig) {
+		return function(h) {
+			return this.__fileApiXHR && this.__fileApiXHR.getResponseHeader ? this.__fileApiXHR.getResponseHeader(h) : (orig == null ? null : orig.apply(this, [h]));
+		};
+	});
+
+	patchXHR('getAllResponseHeaders', function(orig) {
+		return function() {
+			return this.__fileApiXHR && this.__fileApiXHR.getAllResponseHeaders ? this.__fileApiXHR.getAllResponseHeaders() : (orig == null ? null : orig.apply(this));
+		}
+	});
+
+	patchXHR('abort', function(orig) {
+		return function() {
+			return this.__fileApiXHR && this.__fileApiXHR.abort ? this.__fileApiXHR.abort() : (orig == null ? null : orig.apply(this));
+		}
+	});
+
+	patchXHR('setRequestHeader', function(orig) {
+		return function(header, value) {
+			if (header === '__setXHR_') {
+				initializeUploadListener(this);
+				var val = value(this);
+				// fix for angular < 1.2.0
+				if (val instanceof Function) {
+					val(this);
+				}
+			} else {
+				this.__requestHeaders = this.__requestHeaders || {};
+				this.__requestHeaders[header] = value;
+				orig.apply(this, arguments);
+			}
+		}
+	});
+	
+	function redefineProp(xhr, prop, fn) {
+		try {
+			Object.defineProperty(xhr, prop, {get: fn});
+		} catch (e) {/*ignore*/}
+	}
+
+	patchXHR('send', function(orig) {
+		return function() {
+			var xhr = this;
+			if (arguments[0] && arguments[0].__isFileAPIShim) {
+				var formData = arguments[0];
+				var config = {
+					url: xhr.__url,
+					jsonp: false, //removes the callback form param
+					cache: true, //removes the ?fileapiXXX in the url
+					complete: function(err, fileApiXHR) {
+						xhr.__completed = true;
+						if (!err && xhr.__listeners['load']) 
+							xhr.__listeners['load']({type: 'load', loaded: xhr.__loaded, total: xhr.__total, target: xhr, lengthComputable: true});
+						if (!err && xhr.__listeners['loadend']) 
+							xhr.__listeners['loadend']({type: 'loadend', loaded: xhr.__loaded, total: xhr.__total, target: xhr, lengthComputable: true});
+						if (err === 'abort' && xhr.__listeners['abort']) 
+							xhr.__listeners['abort']({type: 'abort', loaded: xhr.__loaded, total: xhr.__total, target: xhr, lengthComputable: true});
+						if (fileApiXHR.status !== undefined) redefineProp(xhr, 'status', function() {return (fileApiXHR.status == 0 && err && err !== 'abort') ? 500 : fileApiXHR.status});
+						if (fileApiXHR.statusText !== undefined) redefineProp(xhr, 'statusText', function() {return fileApiXHR.statusText});
+						redefineProp(xhr, 'readyState', function() {return 4});
+						if (fileApiXHR.response !== undefined) redefineProp(xhr, 'response', function() {return fileApiXHR.response});
+						var resp = fileApiXHR.responseText || (err && fileApiXHR.status == 0 && err !== 'abort' ? err : undefined);
+						redefineProp(xhr, 'responseText', function() {return resp});
+						redefineProp(xhr, 'response', function() {return resp});
+						if (err) redefineProp(xhr, 'err', function() {return err});
+						xhr.__fileApiXHR = fileApiXHR;
+						if (xhr.onreadystatechange) xhr.onreadystatechange();
+						if (xhr.onload) xhr.onload();
+					},
+					fileprogress: function(e) {
+						e.target = xhr;
+						xhr.__listeners['progress'] && xhr.__listeners['progress'](e);
+						xhr.__total = e.total;
+						xhr.__loaded = e.loaded;
+						if (e.total === e.loaded) {
+							// fix flash issue that doesn't call complete if there is no response text from the server  
+							var _this = this
+							setTimeout(function() {
+								if (!xhr.__completed) {
+									xhr.getAllResponseHeaders = function(){};
+									_this.complete(null, {status: 204, statusText: 'No Content'});
+								}
+							}, 10000);
+						}
+					},
+					headers: xhr.__requestHeaders
+				}
+				config.data = {};
+				config.files = {}
+				for (var i = 0; i < formData.data.length; i++) {
+					var item = formData.data[i];
+					if (item.val != null && item.val.name != null && item.val.size != null && item.val.type != null) {
+						config.files[item.key] = item.val;
+					} else {
+						config.data[item.key] = item.val;
+					}
+				}
+
+				setTimeout(function() {
+					if (!hasFlash()) {
+						throw 'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';
+					}
+					xhr.__fileApiXHR = FileAPI.upload(config);
+				}, 1);
+			} else {
+				orig.apply(xhr, arguments);
+			}
+		}
+	});
+	window.XMLHttpRequest.__isFileAPIShim = true;
+
+	var addFlash = function(elem) {
+		if (!hasFlash()) {
+			throw 'Adode Flash Player need to be installed. To check ahead use "FileAPI.hasFlash"';
+		}
+		var el = angular.element(elem);
+		if (!el.attr('disabled')) {
+			if (!el.hasClass('js-fileapi-wrapper') && (el.attr('ng-file-select') != null || el.attr('data-ng-file-select') != null ||
+					(el.attr('ng-file-generated-elem') && 
+							(el.parent().attr('ng-file-select') != null || el.parent().attr('data-ng-file-select') != null)))) {
+				if (FileAPI.wrapInsideDiv) {
+					var wrap = document.createElement('div');
+					wrap.innerHTML = '<div class="js-fileapi-wrapper" style="position:relative; overflow:hidden"></div>';
+					wrap = wrap.firstChild;
+					var parent = elem.parentNode;
+					parent.insertBefore(wrap, elem);
+					parent.removeChild(elem);
+					wrap.appendChild(elem);
+				} else {
+					el.addClass('js-fileapi-wrapper');
+					if (el.attr('ng-file-generated-elem')) {
+						if (el.parent().css('position') === '' || el.parent().css('position') === 'static') {
+							el.parent().css('position', 'relative');
+						}
+						el.css('top', 0).css('bottom', 0).css('left', 0).css('right', 0).css('width', '100%').css('height', '100%').
+							css('padding', 0).css('margin', 0);
+						el.parent().unbind('click', el.parent().__afu_fileClickDelegate__);
+					}
+				}
+			}
+		}
+	};
+	var changeFnWrapper = function(fn) {
+		return function(evt) {
+			var files = FileAPI.getFiles(evt);
+			//just a double check for #233
+			for (var i = 0; i < files.length; i++) {
+				if (files[i].size === undefined) files[i].size = 0;
+				if (files[i].name === undefined) files[i].name = 'file';
+				if (files[i].type === undefined) files[i].type = 'undefined';
+			}
+			if (!evt.target) {
+				evt.target = {};
+			}
+			evt.target.files = files;
+			// if evt.target.files is not writable use helper field
+			if (evt.target.files != files) {
+				evt.__files_ = files;
+			}
+			(evt.__files_ || evt.target.files).item = function(i) {
+				return (evt.__files_ || evt.target.files)[i] || null;
+			}
+			if (fn) fn.apply(this, [evt]);
+		};
+	};
+	var isFileChange = function(elem, e) {
+		return (e.toLowerCase() === 'change' || e.toLowerCase() === 'onchange') && elem.getAttribute('type') == 'file';
+	}
+	if (HTMLInputElement.prototype.addEventListener) {
+		HTMLInputElement.prototype.addEventListener = (function(origAddEventListener) {
+			return function(e, fn, b, d) {
+				if (isFileChange(this, e)) {
+					addFlash(this);
+					origAddEventListener.apply(this, [e, changeFnWrapper(fn), b, d]);
+				} else {
+					origAddEventListener.apply(this, [e, fn, b, d]);
+				}
+			}
+		})(HTMLInputElement.prototype.addEventListener);
+	}
+	if (HTMLInputElement.prototype.attachEvent) {
+		HTMLInputElement.prototype.attachEvent = (function(origAttachEvent) {
+			return function(e, fn) {
+				if (isFileChange(this, e)) {
+					addFlash(this);
+					if (window.jQuery) {
+						// fix for #281 jQuery on IE8
+						angular.element(this).bind('change', changeFnWrapper(null));
+					} else {
+						origAttachEvent.apply(this, [e, changeFnWrapper(fn)]);
+					}
+				} else {
+					origAttachEvent.apply(this, [e, fn]);
+				}
+			}
+		})(HTMLInputElement.prototype.attachEvent);
+	}
+
+	window.FormData = FormData = function() {
+		return {
+			append: function(key, val, name) {
+				this.data.push({
+					key: key,
+					val: val,
+					name: name
+				});
+			},
+			data: [],
+			__isFileAPIShim: true
+		};
+	};
+
+	(function () {
+		//load FileAPI
+		if (!window.FileAPI) {
+			window.FileAPI = {};
+		}
+		if (FileAPI.forceLoad) {
+			FileAPI.html5 = false;
+		}
+		
+		if (!FileAPI.upload) {
+			var jsUrl, basePath, script = document.createElement('script'), allScripts = document.getElementsByTagName('script'), i, index, src;
+			if (window.FileAPI.jsUrl) {
+				jsUrl = window.FileAPI.jsUrl;
+			} else if (window.FileAPI.jsPath) {
+				basePath = window.FileAPI.jsPath;
+			} else {
+				for (i = 0; i < allScripts.length; i++) {
+					src = allScripts[i].src;
+					index = src.search(/\/angular\-file\-upload[\-a-zA-z0-9\.]*\.js/)
+					if (index > -1) {
+						basePath = src.substring(0, index + 1);
+						break;
+					}
+				}
+			}
+
+			if (FileAPI.staticPath == null) FileAPI.staticPath = basePath;
+			script.setAttribute('src', jsUrl || basePath + 'FileAPI.js');
+			document.getElementsByTagName('head')[0].appendChild(script);
+			FileAPI.hasFlash = hasFlash();
+		}
+	})();
+	FileAPI.disableFileInput = function(elem, disable) {
+		if (disable) {
+			elem.removeClass('js-fileapi-wrapper')
+		} else {
+			elem.addClass('js-fileapi-wrapper');
+		}
+	}
+}
+
+
+if (!window.FileReader) {
+	window.FileReader = function() {
+		var _this = this, loadStarted = false;
+		this.listeners = {};
+		this.addEventListener = function(type, fn) {
+			_this.listeners[type] = _this.listeners[type] || [];
+			_this.listeners[type].push(fn);
+		};
+		this.removeEventListener = function(type, fn) {
+			_this.listeners[type] && _this.listeners[type].splice(_this.listeners[type].indexOf(fn), 1);
+		};
+		this.dispatchEvent = function(evt) {
+			var list = _this.listeners[evt.type];
+			if (list) {
+				for (var i = 0; i < list.length; i++) {
+					list[i].call(_this, evt);
+				}
+			}
+		};
+		this.onabort = this.onerror = this.onload = this.onloadstart = this.onloadend = this.onprogress = null;
+
+		var constructEvent = function(type, evt) {
+			var e = {type: type, target: _this, loaded: evt.loaded, total: evt.total, error: evt.error};
+			if (evt.result != null) e.target.result = evt.result;
+			return e;
+		};
+		var listener = function(evt) {
+			if (!loadStarted) {
+				loadStarted = true;
+				_this.onloadstart && this.onloadstart(constructEvent('loadstart', evt));
+			}
+			if (evt.type === 'load') {
+				_this.onloadend && _this.onloadend(constructEvent('loadend', evt));
+				var e = constructEvent('load', evt);
+				_this.onload && _this.onload(e);
+				_this.dispatchEvent(e);
+			} else if (evt.type === 'progress') {
+				var e = constructEvent('progress', evt);
+				_this.onprogress && _this.onprogress(e);
+				_this.dispatchEvent(e);
+			} else {
+				var e = constructEvent('error', evt);
+				_this.onerror && _this.onerror(e);
+				_this.dispatchEvent(e);
+			}
+		};
+		this.readAsArrayBuffer = function(file) {
+			FileAPI.readAsBinaryString(file, listener);
+		}
+		this.readAsBinaryString = function(file) {
+			FileAPI.readAsBinaryString(file, listener);
+		}
+		this.readAsDataURL = function(file) {
+			FileAPI.readAsDataURL(file, listener);
+		}
+		this.readAsText = function(file) {
+			FileAPI.readAsText(file, listener);
+		}
+	}
+}
+})();
diff --git a/testProject/src/web/partials/demo.html b/testProject/src/web/partials/demo.html
new file mode 100644
index 0000000..2b3767b
--- /dev/null
+++ b/testProject/src/web/partials/demo.html
@@ -0,0 +1,5 @@
+<div style="center:true">
+    <div>My demo</div>
+    <div><input type='text' ng-model='demoValue'></div>
+    <div demo demo-Va="demoValue"></div>
+</div>
\ No newline at end of file
diff --git a/testProject/src/web/partials/dev/tool.html b/testProject/src/web/partials/dev/tool.html
new file mode 100644
index 0000000..814175c
--- /dev/null
+++ b/testProject/src/web/partials/dev/tool.html
@@ -0,0 +1,10 @@
+ <div style='margin-top:30px'>
+    <a href="" class="btn btn-green" >点击</a>
+    <a href="" class="btn btn-success">点击一次</a>
+    <a href="" class="btn btn-red">点击试一下</a>
+    <a href="" class="btn btn-blue">点击试一下</a>
+</div>
+<div ui-view="test"></div>
+<div>
+    <input type="button" id='bt' value="submit" ui-sref="main">
+</div>
\ No newline at end of file
diff --git a/testProject/src/web/partials/list.html b/testProject/src/web/partials/list.html
index 03141dd..ab9130e 100644
--- a/testProject/src/web/partials/list.html
+++ b/testProject/src/web/partials/list.html
@@ -6,5 +6,5 @@
         <input type="button" ng-click = 'click()' value="CL">
     </div>
 
-    <div table click='click()' inputValue="inputValue" ngfun='ngfun' ks="ks"></div>
+    <div myable click='click()' input-value="inputValue" ngfun='ngfun'></div>
 </div>
\ No newline at end of file
diff --git a/testProject/src/web/partials/upload.html b/testProject/src/web/partials/upload.html
new file mode 100644
index 0000000..e527b82
--- /dev/null
+++ b/testProject/src/web/partials/upload.html
@@ -0,0 +1,4 @@
+<form ng-submit="uploadFile()">
+    <div id="upload" style="width:100px;height:20px;background:yellow"  ng-file-select ng-file-change="upload($files)" multiple="true" ng-model="file">Click Upload</div>
+    <input type="submit" value="Submit" class="btn btn-success">
+</form>
\ No newline at end of file
-- 
1.9.1

